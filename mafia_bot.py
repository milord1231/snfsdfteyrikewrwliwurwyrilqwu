# -*- coding: utf8 -*-
import random
import sqlite3
import vk_api
from vk_api.longpoll import VkLongPoll
from vkbottle import Bot, Message
from vkbottle.keyboard import Keyboard, Text
from vkbottle import Bot, Message, keyboard_gen
from vkbottle.branch import Branch, ExitBranch 
import hashlib 
from vkbottle.user import User, Message
from vkbottle import VKError
from vkbottle.utils import logger
import aiohttp
import asyncio
import random
import os
from SimpleQIWI import *
import requests
import json
from datetime import datetime

QIWI_TOKEN = QIWI_TOKEN
QIWI_ACCOUNT = NUMBER

bot = Bot(A_TOKEN)
conn = sqlite3.connect(r"inf_users.db")
c = conn.cursor()
sqlite3.connect(":memory:", check_same_thread=False)
group_id = '-195266218'
vk_session = vk_api.VkApi(token=A_TOKEN)
token = A_TOKEN
from vk_api.longpoll import VkLongPoll, VkEventType
longpoll_type = VkLongPoll(vk_session)
print('\n\n\n|---------------|\n'
	'|--BOT RUNNING--|\n'
	'|---------------|\n')
api = QApi(token=QIWI_TOKEN, phone=QIWI_ACCOUNT)
#  üåï


def currency_k(n):
	if 'k' in n or '–∫' in n:
		n = str(n)
		numb = list(n)
		j = 1
		if "–∫" in numb or "k" in numb:
			count = 0
			if "–∫" in numb:
				count = numb.count("–∫")
			elif 'k' in numb:
				count = numb.count("k")
			for i in range(count):
				numb.pop()
			if "–∫" in numb or "k" in numb or len(numb) > count:
				err = True
				value = 0
				return True, value
			else:
				value = ""
				for i in range(len(numb)):
					value += str(numb[i])
				value = int(value) * 1000 ** count
				err = False
				return False, value
	else:
		return False, int(n)


def get_user_balance(user_id):
	c.execute("SELECT balance FROM users_info WHERE id=%d" % user_id)
	balance = c.fetchone()[0]
	norm_bal = balance
	balance = ('{:,} $'.format(balance).replace(',', ' '))
	c.execute("SELECT card_balance FROM users_info WHERE id=%d" % user_id)
	card_balance = c.fetchone()[0]
	norm_card_bal = card_balance
	card_balance = ('{:,} $'.format(card_balance).replace(',', ' '))
	data = balance, card_balance, norm_bal, norm_card_bal
	return data
    

def edit_user_balance(user_id, summ, reverse=False):
	bal, card_balance, norm_bal, norm_card_bal = get_user_balance(user_id)
	if reverse:
		c.execute("UPDATE users_info SET balance=%d WHERE id=%d" % (int(norm_bal) - int(summ), user_id))
		conn.commit()
	else:
		c.execute("UPDATE users_info SET balance=%d WHERE id=%d" % (int(norm_bal) + int(summ), user_id))
		conn.commit()

def edit_user_card_balance(user_id, summ, reverse=False):
	bal, card_balance, norm_bal, norm_card_bal = get_user_balance(user_id)
	if reverse:
		c.execute("UPDATE users_info SET card_balance=%d WHERE id=%d" % (int(norm_card_bal) - int(summ), user_id))
		conn.commit()
	else:
		c.execute("UPDATE users_info SET card_balance=%d WHERE id=%d" % (int(norm_card_bal) + int(summ), user_id))
		conn.commit()


def is_digit1(string):
	string = str(string)
	if string.isdigit():
		return True
	else:
		try:
			float(string)
			return True
		except ValueError:
			return False

def currency(number):
	data = ('{:,}'.format(number).replace(',', ' '))
	return data


def join_mafia(user_id, mafia_id):
	user_id, mafia_id = int(user_id), int(mafia_id)
	mafia_name = c.execute(f'SELECT name FROM mafias WHERE id={mafia_id}').fetchone()
	c.execute('UPDATE users_info SET mafia_id=%d WHERE id=%d' % (mafia_id, user_id))
	conn.commit()
	c.execute('UPDATE users_info SET mafia_name=? WHERE id=?', (mafia_name[0], user_id))
	conn.commit()


@bot.on.chat_message(text='–¥–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–∞', lower=True)
async def cancle_donate(ans: Message):
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	result = c.execute(f"SELECT * FROM payment_query WHERE user_id = {ans.from_id}").fetchone()
	if result is None:
		await ans('üö´–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.')
	else:
		await ans(f'‚úÖ–î–æ–Ω–∞—Ç –æ—Ç {result[3]} –Ω–∞ {result[1]} —Ä. –æ—Ç–º–µ–Ω–µ–Ω!')
		c.execute(f"DELETE FROM payment_query WHERE user_id = {ans.from_id}") 
		conn.commit()


@bot.on.message(text='–¥–æ–Ω–∞—Ç', lower=True)
async def err(ans: Message):
	await ans("üö´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: '–î–æ–Ω–∞—Ç <—Å—É–º–º–∞>'")


@bot.on.chat_message(text='–¥–æ–Ω–∞—Ç', lower=True)
async def err(ans: Message):
	await ans("üö´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: '–î–æ–Ω–∞—Ç <—Å—É–º–º–∞>'")


@bot.on.chat_message(text='–¥–æ–Ω–∞—Ç <summ>', lower=True)
async def donate(ans: Message, summ):
	err = False
	if "k" in str(summ).lower() or "–∫" in str(summ).lower():
		err, summ = currency_k(str(summ))
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if not is_digit1(summ) or err:
		await ans("üö´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: '–î–æ–Ω–∞—Ç <—Å—É–º–º–∞>'") 
	elif int(summ) < 0 or '+' in str(summ):
		await ans("üö´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: '–î–æ–Ω–∞—Ç <—Å—É–º–º–∞>'")
	else:
		if res is not None:
			pass
		else:
			c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
			conn.commit()
		result = c.execute(f"SELECT * FROM payment_query WHERE user_id = {ans.from_id}").fetchone()
		if result is None:
			random_code = str(random.randint(100000, 999999))
			date = datetime.fromtimestamp(int(time.time()))
			print(f"\n\n\t\t\t{date}")
			comment = str(ans.from_id) + '|donate'
			c.execute("INSERT INTO payment_query VALUES(?, ?, ?, ?)",  (ans.from_id, int(summ), comment, date))
			conn.commit()
			await ans(f'‚úÖ–°—á–µ—Ç –Ω–∞ {summ}—Ä. –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!\n\n\t–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {summ}p. –Ω–∞ –Ω–æ–º–µ—Ä +79877353524 –° –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: "{comment}" (–±–µ–∑ –∫–æ–≤—ã—á–µ–∫), –∏–Ω–∞—á–µ –¥–æ–Ω–∞—Ç –Ω–µ –ø—Ä–æ–π–¥–µ—Ç.\n\n‚ö†–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ: "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"‚ö†')
		else:
			await ans(f'üö´–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç. \n–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë, –∫–æ–º–∞–Ω–¥–æ–π "–¥–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–∞". –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π "–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å".')



@bot.on.chat_message(text='–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', lower=True)
async def update(ans: Message):
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	s = requests.Session()
	s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN  
	parameters = {'rows': '50'}
	h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ QIWI_ACCOUNT +'/payments', params = parameters)
	req = json.loads(h.text)
	print(req['data'][0]['comment'])
	result = c.execute(f"SELECT * FROM payment_query WHERE user_id = {ans.from_id}").fetchone()
	print(result)
	state = 0
	if result is not None:
		random_code = result[2]
		sum = result[1]
		for i in range(len(req['data'])):
			if req['data'][i]['comment'] == random_code:
				state = 1
				if req['data'][i]['sum']['amount'] == sum:
					c.execute(f"DELETE FROM payment_query WHERE user_id = {ans.from_id}") 
					state = 2
		if state == 2:
			await ans(f'üìñ–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\tüìù–ü–ª–∞—Ç–µ–∂ –æ—Ç {result[3]}\n\tüí≥–°—É–º–º–∞ {result[1]} —Ä—É–±.\n‚öô–°—Ç–∞—Ç—É—Å: \n  ‚úÖ–û–ø–ª–∞—á–µ–Ω–æ')
			prize = int(sum) * 1150
			await ans(f'‚úÖ–ù–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {currency(prize)}üåï –∑–æ–ª–æ—Ç—ã—Ö')
			edit_user_balance(ans.from_id, prize)
		elif state == 1:
			await ans(f'üìñ–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\tüìù–ü–ª–∞—Ç–µ–∂ –æ—Ç {result[3]}\n\tüí≥–°—É–º–º–∞ {result[1]} —Ä—É–±.\n‚öô–°—Ç–∞—Ç—É—Å: \n  üö´–°—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ–π.')
		else:
			await ans(f'üìñ–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\tüìù–ü–ª–∞—Ç–µ–∂ –æ—Ç {result[3]}\n\tüí≥–°—É–º–º–∞ {result[1]} —Ä—É–±.\n‚öô–°—Ç–∞—Ç—É—Å: \n  üö´–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ')
	else:
		await ans('üö´–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.')





@bot.on.message(text='–¥–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–∞', lower=True)
async def cancle_donate(ans: Message):
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	result = c.execute(f"SELECT * FROM payment_query WHERE user_id = {ans.from_id}").fetchone()
	if result is None:
		await ans('üö´–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.')
	else:
		await ans(f'‚úÖ–î–æ–Ω–∞—Ç –æ—Ç {result[3]} –Ω–∞ {result[1]} —Ä. –æ—Ç–º–µ–Ω–µ–Ω!')
		c.execute(f"DELETE FROM payment_query WHERE user_id = {ans.from_id}") 
		conn.commit()



@bot.on.message(text='–¥–æ–Ω–∞—Ç <summ>', lower=True)
async def donate(ans: Message, summ):
	err  = False
	if "k" in str(summ).lower() or "–∫" in str(summ).lower():
		err, summ = currency_k(str(summ))
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if not is_digit1(summ) or err:
		await ans("üö´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: '–î–æ–Ω–∞—Ç <—Å—É–º–º–∞>'") 
	elif int(summ) < 0 or '+' in str(summ):
		await ans("üö´–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: '–î–æ–Ω–∞—Ç <—Å—É–º–º–∞>'")
	else:
		if res is not None:
			pass
		else:
			c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
			conn.commit()
		result = c.execute(f"SELECT * FROM payment_query WHERE user_id = {ans.from_id}").fetchone()
		if result is None:
			random_code = str(random.randint(100000, 999999))
			date = datetime.fromtimestamp(int(time.time()))
			print(f"\n\n\t\t\t{date}")
			comment = str(ans.from_id) + '|donate'
			c.execute("INSERT INTO payment_query VALUES(?, ?, ?, ?)",  (ans.from_id, int(summ), comment, date))
			conn.commit()
			await ans(f'‚úÖ–°—á–µ—Ç –Ω–∞ {summ}—Ä. –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!\n\n\t–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {summ}p. –Ω–∞ –Ω–æ–º–µ—Ä +79877353524 –° –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: "{comment}" (–±–µ–∑ –∫–æ–≤—ã—á–µ–∫), –∏–Ω–∞—á–µ –¥–æ–Ω–∞—Ç –Ω–µ –ø—Ä–æ–π–¥–µ—Ç.\n\n‚ö†–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ: "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"‚ö†')
		else:
			await ans(f'üö´–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç. \n–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë, –∫–æ–º–∞–Ω–¥–æ–π "–¥–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–∞". –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π "–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å".')



@bot.on.message(text='–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', lower=True)
async def update(ans: Message):
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	s = requests.Session()
	s.headers['authorization'] = 'Bearer ' + QIWI_TOKEN  
	parameters = {'rows': '50'}
	h = s.get('https://edge.qiwi.com/payment-history/v1/persons/'+ QIWI_ACCOUNT +'/payments', params = parameters)
	req = json.loads(h.text)
	print(req['data'][0]['comment'])
	result = c.execute(f"SELECT * FROM payment_query WHERE user_id = {ans.from_id}").fetchone()
	print(result)
	state = 0
	if result is not None:
		random_code = result[2]
		sum = result[1]
		for i in range(len(req['data'])):
			if req['data'][i]['comment'] == random_code:
				state = 1
				if req['data'][i]['sum']['amount'] == sum:
					c.execute(f"DELETE FROM payment_query WHERE user_id = {ans.from_id}") 
					state = 2
		if state == 2:
			await ans(f'üìñ–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\tüìù–ü–ª–∞—Ç–µ–∂ –æ—Ç {result[3]}\n\tüí≥–°—É–º–º–∞ {result[1]} —Ä—É–±.\n‚öô–°—Ç–∞—Ç—É—Å: \n  ‚úÖ–û–ø–ª–∞—á–µ–Ω–æ')
			prize = int(sum) * 1150
			await ans(f'‚úÖ–ù–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {currency(prize)}üåï –∑–æ–ª–æ—Ç—ã—Ö')
			edit_user_balance(ans.from_id, prize)
		elif state == 1:
			await ans(f'üìñ–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\tüìù–ü–ª–∞—Ç–µ–∂ –æ—Ç {result[3]}\n\tüí≥–°—É–º–º–∞ {result[1]} —Ä—É–±.\n‚öô–°—Ç–∞—Ç—É—Å: \n  üö´–°—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ–π.')
		else:
			await ans(f'üìñ–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\tüìù–ü–ª–∞—Ç–µ–∂ –æ—Ç {result[3]}\n\tüí≥–°—É–º–º–∞ {result[1]} —Ä—É–±.\n‚öô–°—Ç–∞—Ç—É—Å: \n  üö´–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ')
	else:
		await ans('üö´–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.')

@bot.on.message(text='–±–∞–ª–∞–Ω—Å', lower=True)
async def balance(ans: Message):
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	bal, card_balance, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
	await ans(f'üí∞@id{ans.from_id}({first_name}), –≤–∞—à –±–∞–ª–∞–Ω—Å:\n{bal}\n\nüí≥–ë–∞–ª–∞–Ω—Å –Ω–∞ –∫–∞—Ä—Ç–µ: \n{card_balance}')

@bot.on.chat_message(text='–±–∞–ª–∞–Ω—Å', lower=True)
async def balance(ans: Message):
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	bal, card_balance, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
	await ans(f'üí∞@id{ans.from_id}({first_name}), –≤–∞—à –±–∞–ª–∞–Ω—Å:\n{bal}\n\nüí≥–ë–∞–ª–∞–Ω—Å –Ω–∞ –∫–∞—Ä—Ç–µ: \n{card_balance}')


@bot.on.message(text='–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å', lower=True)
async def err(ans: Message):
	await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!')

@bot.on.chat_message(text='–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å', lower=True)
async def err(ans: Message):
	await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!')


@bot.on.message(text='–∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å', lower=True)
async def err(ans: Message):
	await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!')


@bot.on.chat_message(text='–∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å', lower=True)
async def err(ans: Message):
	await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!')





@bot.on.chat_message(text='–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <summ>', lower=True)
async def add_card_balance(ans: Message, summ):
	err = False
	if "k" in str(summ).lower() or "–∫" in str(summ).lower():
		err, summ = currency_k(str(summ))
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	bal, card_bal, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
	if not is_digit1(summ) or err:
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!') 
	elif int(summ) < 0 or '+' in str(summ):
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!') 
	elif int(summ) > int(norm_card_bal):
		await ans('‚ùå–ù–∞ –∫–∞—Ä—Ç–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥')
	else:
		edit_user_card_balance(ans.from_id, int(summ), True)
		edit_user_balance(ans.from_id, int(summ))
		await ans(f'‚úÖ–í—ã —Å–Ω—è–ª–∏ —Å –∫–∞—Ä—Ç—ã {currency(int(summ))}$')



@bot.on.chat_message(text='–∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <summ>', lower=True)
async def add_card_balance(ans: Message, summ):
	err = False
	if "k" in str(summ).lower() or "–∫" in str(summ).lower():
		err, summ = currency_k(str(summ))
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	bal, card_bal, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
	if not is_digit1(summ) or err:
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!.') 
	elif int(summ) < 0:
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!') 
	elif int(summ) > int(norm_bal):
		await ans('‚ùå–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥, —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É')
	else:
		edit_user_card_balance(ans.from_id, int(summ))
		edit_user_balance(ans.from_id, int(summ), True)
		await ans(f'‚úÖ–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {currency(int(summ))}$')



@bot.on.message(text='–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <summ>', lower=True)
async def add_card_balance(ans: Message, summ):
	err = False
	if "k" in str(summ).lower() or "–∫" in str(summ).lower():
		err, summ = currency_k(str(summ))
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	bal, card_bal, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
	if not is_digit1(summ) or  err:
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!') 
	elif int(summ) < 0:
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!') 
	elif int(summ) > int(norm_card_bal):
		await ans('‚ùå–ù–∞ –∫–∞—Ä—Ç–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥')
	else:
		edit_user_card_balance(ans.from_id, int(summ), True)
		edit_user_balance(ans.from_id, int(summ))
		await ans(f'‚úÖ–í—ã —Å–Ω—è–ª–∏ —Å –∫–∞—Ä—Ç—ã {currency(int(summ))}$')



@bot.on.message(text='–∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <summ>', lower=True)
async def add_card_balance(ans: Message, summ):
	err = False
	if "k" in str(summ).lower() or "–∫" in str(summ).lower():
		err, summ = currency_k(str(summ))
		await ans(f'{err} {summ}')
	data = await bot.api.users.get(user_ids=ans.from_id)
	first_name = data[0].first_name
	last_name = data[0].last_name
	name = first_name + ' ' + last_name
	c.execute("SELECT * FROM users_info WHERE id=%d" % ans.from_id)
	res = c.fetchone()
	if res is not None:
		pass
	else:
		c.execute("INSERT INTO users_info(balance, id, name) VALUES (?, ?, ?)", (2000, int(ans.from_id), name))
		conn.commit()
	bal, card_bal, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
	summ = int(summ)
	if not is_digit1(summ) or err:
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!.') 
	elif int(summ) < 0:
		await ans('‚ùå–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∞—Ä—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç—å <—Å—É–º–º–∞>\n‚ö†–ü–∞—Ä–∞–º–µ—Ç—Ä <—Å—É–º–º–∞> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!') 
	elif int(summ) > int(norm_bal):
		await ans('‚ùå–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥, —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É')
	else:
		edit_user_card_balance(ans.from_id, int(summ))
		edit_user_balance(ans.from_id, int(summ), True)
		await ans(f'‚úÖ–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {currency(int(summ))}$')

@bot.on.message(text='–º–∞—Ñ–∏—è –ø–æ–º–æ—â—å', lower=True)
async def help_mafia(ans: Message):
	await ans(f'üìñ–ü–æ–º–æ—â—å –ø–æ –º–∞—Ñ–∏—è–º: \n1Ô∏è‚É£ –ú–∞—Ñ–∏—è –≤—Å—Ç—É–ø–∏—Ç—å <id –º–∞—Ñ–∏–∏> - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n2Ô∏è‚É£ –ú–∞—Ñ–∏—è —Å–æ–∑–¥–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–µ–Ω–Ω—É—é "—Å–µ–º—å—é" (–°—Ç–æ–∏–º–æ—Å—Ç—å: 2 500 000 $)\n3Ô∏è‚É£ –ú–∞—Ñ–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ—é "—Å–µ–º—å—é" (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É)\n4Ô∏è‚É£ –ú–∞—Ñ–∏—è —Å–ø–∏—Å–æ–∫ - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–∏–∫–æ–≤ –≤–∞—à–µ–π "—Å–µ–º—å–∏"\n5Ô∏è‚É£ –ú–∞—Ñ–∏—è —Ç–æ–ø - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ñ–∏–π-–ª–∏–¥–µ—Ä–æ–≤\n6Ô∏è‚É£ –ú–∞—Ñ–∏—è —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –≤–∞—à—É –º–∞—Ñ–∏—é\n7Ô∏è‚É£ –ú–∞—Ñ–∏—è –∏–º—è <–Ω–æ–≤–æ–µ –∏–º—è> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ñ–∏–∏ (–°—Ç–æ–∏–º–æ—Å—Ç—å: 120 000 $)\n8Ô∏è‚É£ –ú–∞—Ñ–∏—è –∏—Å–∫–ª—é—á–∏—Ç—å <id —É—á–∞—Å—Ç–Ω–∏–∫–∞> - –∏—Å–∫–ª—é—á–∏—Ç—å —á–ª–µ–Ω–∞ –º–∞—Ñ–∏–∏\n9Ô∏è‚É£ –ú–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Ñ–∏–∏')


@bot.on.chat_message(text='–º–∞—Ñ–∏—è –ø–æ–º–æ—â—å', lower=True)
async def help_mafia(ans: Message):
	await ans(f'üìñ–ü–æ–º–æ—â—å –ø–æ –º–∞—Ñ–∏—è–º: \n1Ô∏è‚É£ –ú–∞—Ñ–∏—è –≤—Å—Ç—É–ø–∏—Ç—å <id –º–∞—Ñ–∏–∏> - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n2Ô∏è‚É£ –ú–∞—Ñ–∏—è —Å–æ–∑–¥–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–µ–Ω–Ω—É—é "—Å–µ–º—å—é" (–°—Ç–æ–∏–º–æ—Å—Ç—å: 2 500 000 $)\n3Ô∏è‚É£ –ú–∞—Ñ–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ—é "—Å–µ–º—å—é" (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É)\n4Ô∏è‚É£ –ú–∞—Ñ–∏—è —Å–ø–∏—Å–æ–∫ - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–∏–∫–æ–≤ –≤–∞—à–µ–π "—Å–µ–º—å–∏"\n5Ô∏è‚É£ –ú–∞—Ñ–∏—è —Ç–æ–ø - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ñ–∏–π-–ª–∏–¥–µ—Ä–æ–≤\n6Ô∏è‚É£ –ú–∞—Ñ–∏—è —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å –≤–∞—à—É –º–∞—Ñ–∏—é\n7Ô∏è‚É£ –ú–∞—Ñ–∏—è –∏–º—è <–Ω–æ–≤–æ–µ –∏–º—è> - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ñ–∏–∏ (–°—Ç–æ–∏–º–æ—Å—Ç—å: 120 000 $)\n8Ô∏è‚É£ –ú–∞—Ñ–∏—è –∏—Å–∫–ª—é—á–∏—Ç—å <id —É—á–∞—Å—Ç–Ω–∏–∫–∞> - –∏—Å–∫–ª—é—á–∏—Ç—å —á–ª–µ–Ω–∞ –º–∞—Ñ–∏–∏\n9Ô∏è‚É£ –ú–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –º–∞—Ñ–∏–∏')


@bot.on.message(text='–º–∞—Ñ–∏—è —Å–æ–∑–¥–∞—Ç—å <name>', lower=True)
async def help_mafia(ans: Message, name):
	mafia_create_free = c.execute('SELECT mafia_name FROM users_info WHERE id=%d' %  ans.from_id).fetchone()[0]
	if mafia_create_free is None or mafia_create_free == 'none':
		name_true = False
		bal, card_bal, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
		name_tru = c.execute('SELECT name FROM mafias').fetchall()
		for i in range(len(name_tru)):
			if name not in name_tru[i][0]:
				name_true = False
			else:
				name_true = True
				break
		if norm_bal < 2500000 and norm_bal + norm_card_bal < 2500000:
			await ans(f'‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 2 500 000 $, —É –≤–∞—Å: {currency(norm_bal + norm_card_bal)} $ (–±–∞–ª–∞–Ω—Å + –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–∞—Ä—Ç–µ)')
		elif name_true:
			await ans(f'‚ùå–î–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ.')
		elif norm_card_bal + norm_bal >= 2500000 and norm_bal < 2500000:
			await ans(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –º–∞—Ñ–∏—é, –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ:  "{name}". \n‚ö†–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: \n\t —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ ~ {currency(norm_bal)} $\n\t —Å–ø–∏—Å–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç—ã ~ {currency(2500000 - norm_bal)} $')
			ids = c.execute("SELECT id from mafias").fetchall()
			if ids is not None:
				last_id = len(ids)
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			else:
				last_id = 0
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			edit_user_balance(ans.from_id, norm_bal, True)
			edit_user_card_balance(ans.from_id, 2500000 - norm_bal, True)
			join_mafia(ans.from_id, last_id + 1)
		else:
			await ans(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –º–∞—Ñ–∏—é, –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ:  "{name}". \n‚ö†–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: \n\t —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ ~ 2 500 000 $')
			ids = c.execute("SELECT id from mafias").fetchone()
			if ids is not None:
				last_id = len(ids)
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			else:
				last_id = 0
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			edit_user_balance(ans.from_id, 2500000, True)
			join_mafia(ans.from_id, last_id + 1)
	else:
		await ans('‚ùå–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –º–∞—Ñ–∏–∏.\n–ü–æ–∫–∏–Ω—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π "–º–∞—Ñ–∏—è –≤—ã—Ö–æ–¥" –∏–ª–∏ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–∞—Ñ–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π "–º–∞—Ñ–∏—è —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å".')

@bot.on.chat_message(text='–º–∞—Ñ–∏—è —Å–æ–∑–¥–∞—Ç—å <name>', lower=True)
async def help_mafia(ans: Message, name):
	mafia_create_free = c.execute('SELECT mafia_name FROM users_info WHERE id=%d' %  ans.from_id).fetchone()[0]
	if mafia_create_free is None or mafia_create_free == 'none':
		name_true = False
		bal, card_bal, norm_bal, norm_card_bal = get_user_balance(ans.from_id)
		name_tru = c.execute('SELECT name FROM mafias').fetchall()
		for i in range(len(name_tru)):
			if name not in name_tru[i][0]:
				name_true = False
			else:
				name_true = True
				break
		if norm_bal < 2500000 and norm_bal + norm_card_bal < 2500000:
			await ans(f'‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 2 500 000 $, —É –≤–∞—Å: {currency(norm_bal + norm_card_bal)} $ (–±–∞–ª–∞–Ω—Å + –±–∞–ª–∞–Ω—Å –Ω–∞ –∫–∞—Ä—Ç–µ)')
		elif name_true:
			await ans(f'‚ùå–î–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ.')
		elif norm_card_bal + norm_bal >= 2500000 and norm_bal < 2500000:
			await ans(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –º–∞—Ñ–∏—é, –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ:  "{name}". \n‚ö†–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: \n\t —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ ~ {currency(norm_bal)} $\n\t —Å–ø–∏—Å–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç—ã ~ {currency(2500000 - norm_bal)} $')
			ids = c.execute("SELECT id from mafias").fetchall()
			if ids is not None:
				last_id = len(ids)
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			else:
				last_id = 0
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			edit_user_balance(ans.from_id, norm_bal, True)
			edit_user_card_balance(ans.from_id, 2500000 - norm_bal, True)
			join_mafia(ans.from_id, last_id + 1)
		else:
			await ans(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –º–∞—Ñ–∏—é, –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ:  "{name}". \n‚ö†–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: \n\t —Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ ~ 2 500 000 $')
			ids = c.execute("SELECT id from mafias").fetchone()
			if ids is not None:
				last_id = len(ids)
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			else:
				last_id = 0
				c.execute('INSERT INTO mafias(id, name, users, admins) VALUES(?, ?, ?, ?)', (int(last_id) + 1, name, str(ans.from_id) + ';', str(ans.from_id) + '-dev;'))
				conn.commit()
			edit_user_balance(ans.from_id, 2500000, True)
			join_mafia(ans.from_id, last_id + 1)
	else:
		await ans('‚ùå–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –º–∞—Ñ–∏–∏.\n–ü–æ–∫–∏–Ω—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π "–º–∞—Ñ–∏—è –≤—ã—Ö–æ–¥" –∏–ª–∏ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–∞—Ñ–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π "–º–∞—Ñ–∏—è —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å".')


def get_user_mafia(user_id):
	result = c.execute('SELECT * FROM users_info WHERE id=%d' % user_id).fetchall()
	mafia_name = result[0][4]
	mafia_id = result[0][5]
	admins_list = ''
	admins = c.execute('SELECT admins FROM mafias WHERE id=%d' % int(mafia_id)).fetchone()[0]
	admins = admins.split(';')
	del admins[-1]
	print(admins)
	for adm in admins:
		adm = adm.split('-')
		info = vk_session.method('users.get', {'user_ids': adm[0]})
		print(info[0])
		data = info[0]
		name = data['first_name'] + ' ' + data['last_name']
		if adm[1] == 'dev':
			admins_list += f"\n@id{adm[0]}({name}) - –ë–æ—Å—Å –º–∞—Ñ–∏–∏üëë"
		elif adm[1] == 'adm':
			admins_list += f"\n@id{adm[0]}({name}) - –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞üé©"
		elif adm[1] == 'help':
			admins_list += f"\n@id{adm[0]}({name}) - –ù–∞–¥–µ–∂–Ω—ã–π –¥—Ä—É–≥üéì"
	users = c.execute('SELECT users FROM mafias WHERE id=%d' % int(mafia_id)).fetchone()[0]
	users = users.split(';')
	del users[-1]
	count = len(users)
	users_list = ''
	for usr in users:
		info = vk_session.method('users.get', {'user_ids': adm[0]})
		data = info[0]
		name = data['first_name'] + ' ' + data['last_name']
		users_list += f"\n@id{adm[0]}({name})"
	return mafia_name, mafia_id, admins_list, users_list, count


def get_mafia_info(mafia_id):
	result = c.execute('SELECT * FROM mafias WHERE id=%d' % mafia_id).fetchall()
	balance = result[0][2]
	rate = result[0][3]
	proporty = result[0][6]
	if proporty is None:
		proporty = '–ù–µ—Ç'
	else:
		proporty = result[0][6]
	return balance, rate, proporty


@bot.on.message(text='–º–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—å', lower=True)
async def profile_mafia(ans: Message):
	in_mafia = c.execute("SELECT mafia_id FROM users_info WHERE id=%d" % ans.from_id).fetchone()
	if in_mafia is not None:
		mafia_name, mafia_id, admins_list, users_list, count = get_user_mafia(ans.from_id)
		balance, rate, proporty = get_mafia_info(mafia_id)
		await ans(f'üìñ–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ñ–∏–∏: {mafia_name}\nüÜî:{mafia_id}\nüìä–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}/10\nüìÉ–£—á–∞—Å—Ç–Ω–∏–∫–∏: {users_list}\nüëî–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: {admins_list}\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüí∞–ö–∞–∑–Ω–∞: {currency(balance)} $\nüèÜ–†–µ–π—Ç–∏–Ω–≥: {currency(rate)}\nüé´–ò–º—É—â–µ—Å—Ç–≤–æ: {proporty}')
	else:
		await ans('‚ùå–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –º–∞—Ñ–∏–∏')



@bot.on.chat_message(text='–º–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—å', lower=True)
async def profile_mafia(ans: Message):
	in_mafia = c.execute("SELECT mafia_id FROM users_info WHERE id=%d" % ans.from_id).fetchone()
	if in_mafia is not None:
		mafia_name, mafia_id, admins_list, users_list, count = get_user_mafia(ans.from_id)
		balance, rate, proporty = get_mafia_info(mafia_id)
		await ans(f'üìñ–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ñ–∏–∏: {mafia_name}\nüÜî:{mafia_id}\nüìä–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}/10\nüìÉ–£—á–∞—Å—Ç–Ω–∏–∫–∏: {users_list}\nüëî–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: {admins_list}\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüí∞–ö–∞–∑–Ω–∞: {currency(balance)} $\nüèÜ–†–µ–π—Ç–∏–Ω–≥: {currency(rate)}\nüé´–ò–º—É—â–µ—Å—Ç–≤–æ: {proporty}')
	else:
		await ans('‚ùå–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –º–∞—Ñ–∏–∏')



if '__main__' == __name__:
	bot.run_polling()


#  1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü 
